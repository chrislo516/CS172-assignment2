from enum import IntEnum
import enum
import re, os, string, nltk, math, numpy, heapq, operator,sys
from helper import remove_punc,remove_stopword,stemming



dic = {}
'''{
'85': ['document', 'discuss', 'alleg', 'measur', 'taken', 'corrupt', 'public', 'offici', 'government', 'jurisdict', 'worldwid'], 
'77': ['document', 'report', 'poach', 'method', 'use', 'certain', 'type', 'wildlif'], '87': ['document', 'report', 'current', 'crimin', 'action', 'offic', 'fail', 'us', 'financi', 'institut'], 
'94': ['document', 'must', 'identifi', 'crime', 'perpetr', 'aid', 'comput'], 
'100': ['document', 'identifi', 'effort', 'noncommunist', 'industri', 'state', 'regul', 'transfer', 'hightech', 'good', 'dualus', 'technolog', 'undesir', 'nation'], 
'89': ['document', 'must', 'identifi', 'exist', 'pend', 'invest', 'opec', 'member', 'state', 'downstream', 'oper'], 
'95': ['document', 'must', 'describ', 'comput', 'applic', 'crime', 'solv'], 
'98': ['document', 'must', 'identifi', 'individu', 'organ', 'produc', 'fiber', 'optic', 'equip'], 
'91': ['document', 'identifi', 'acquisit', 'us', 'armi', 'specifi', 'advanc', 'weapon', 'system']}
'''
query_num = []
docid_word = []
query_word_doc = []
exist_query_word = {}
tf_word=[]
num_term_doc = [] # total doc
all_doc_tf_idf = {}
query_tf_idf = {}

with open("term_count_doc.txt",'r') as f:
    num_doc = len(f.readlines())
f.close()

def read_query_list_to_dict(file):
    with open(file, 'r') as f:
        for i in f:
            i = remove_punc(i)
            x = i.rsplit()
            dic[f"{x[0]}"] = stemming(remove_stopword(x[1:]))
            query_num.append(x[0])
    f.close

def read_query_word(query,querynum):
    unfoundword=[]
    temp = []
    with open("termids.txt",'r') as termids: # 1
        for idx, i in enumerate(termids):
            temp.append(i.rstrip().rsplit())
        for index, i in enumerate(query):
            found = 0
            for j in range(len(temp)):
                if i == temp[j][1]:
                    found = 1
                    docid_word.append((i,temp[j][0],querynum))
            if found == 0:
                unfoundword.append(i)
        for i in unfoundword:
            dic[f'{querynum}'].remove(i)
                    #print(f"Found {i} with an docid {temp[j][0]}")
        #print(docid_word)           
    with open("term_index.txt",'r') as term_index: # 1 docid:docindex docid:docindex docid:docindex 
        tmp = []
        for j in term_index:
            #re.findall('\w+(?=:)', j)
            tmp.append(j.rsplit())
        for i in range(len(docid_word)):
            for j in tmp:
                if docid_word[i][1] == j[0]:
                    if len(query_word_doc) == 0:
                        query_word_doc.append((docid_word[i][1],j[1:]))
                    else:
                        for elem in query_word_doc:
                            if (docid_word[i][1],j[1:]) in query_word_doc:
                                continue
                            else:
                                query_word_doc.append((docid_word[i][1],j[1:]))
    del tmp
    term_index.close()
    termids.close()

def tf(query):
    tmp = []
    tmpdict = {}
    exist_keylist = []
    flag = 0
    with open('term_count_doc.txt','r') as f:
        for i in f:
            x = i.rsplit()
            x[0] = int(str(re.findall('(?<=89).*',x[0])[0]).replace('-',''))
            num_term_doc.append(x)
    f.close()
    for id, i in enumerate(query):
        if id == 0:
            tmping = i[2]
            exist_query_word[f"{i[2]}"] = []
        else:
            if i[2] != tmping:
                tmping = i[2]
                exist_query_word[f"{i[2]}"] = []
        exist_query_word[f"{i[2]}"].append(i[0])
    #print(exist_query_word)
    for idx, i in enumerate(query):
        
        if idx == 0:
            temp1 = i[2]
        if temp1 != i[2]:
            temp1 = i[2]
        for j in query_word_doc:
            if i[1] == j[0]:
                tmp2 = []
                for k in j[1]:
                    tmp_doc = re.findall('\w+(?=:)', k)
                    tmp2.append(tmp_doc)
        for idx, x in enumerate(tmp2):
            tmp_count =0
            count = 0
            if idx == 0:
                tmp_doc = x
            else:
                if x == tmp_doc:
                    continue
                else:
                    tmp_doc = x
            while tmp_count < len(tmp2):
                if x == tmp2[tmp_count]:
                    count += 1
                tmp_count += 1
            if idx == 0:
                tmpa = i[0]
                tmpdict[f'{i[0]}'] = {}
            if tmpa != i[0]:
                tmpa = i[0]
                tmpdict[f'{i[0]}'] = {}
                if(flag ==1):
                    exist_query_word[f'{i[2]}'] = []
                    flag =0
            tmpdict[f'{i[0]}'][f'{tmp2[idx][0]}']=count
    del tmp2
    #print(tmpdict)
    for elem in query:
        exist_keylist.append(list(tmpdict[f'{elem[0]}'].keys()))
    #Bug
    #print(tmpdict) #{'document':[docid:doc_term_count,....]}
    counter = 0
    dup_term = []
    for elem0 in exist_query_word: #[85,77,87,94,100,89,95,98,91]
        #print(elem0) 
        for elem2 in exist_query_word[elem0]:
            for ix in range(len(exist_keylist[count])):
                for xi in num_term_doc:
                    if int(exist_keylist[count][ix])== int(xi[0]):
                        tmpC = xi[1]
                if elem2 not in dup_term:
                    tmpdict[f'{elem2}'][f'{exist_keylist[count][ix]}'] = tmpdict[f'{elem2}'][f'{exist_keylist[count][ix]}']/int(tmpC)
                #print(f'{elem2}:{exist_keylist[count][ix]}:{tmpC}:{count}')
            count+=1
            dup_term.append(elem2)
    #print(tmpdict)
    return tmpdict

def idf(query):
    cal_idf = []
    tmp = []
    num_doc_with_term  = 0
    with open('term_info.txt','r') as f:
        for x in f:
            tmp.append(x.rsplit())
    f.close()
    for i in query:
        for x in tmp:
            if i[1] == x[0]:
                #x[3]: The total number of documents in which the term appear
                cal_idf.append((i[0],math.log10(num_doc/int(x[3]))))
                break
        #cal_idf.append((i,math.log(num_doc/int(num_doc_with_term))))
    return cal_idf

def query_tf_idf_word(query,idf):
    query_tf = []
    tmp = {} # count # of word occur in each query
    tmp1 = {}
    for i in query.keys():
        #print(i)
        for idx,y in enumerate(query[f'{i}']):
            count = 0
            for z in query[f'{i}']:
                if y == z: 
                    count += 1   
                    if idx == 0:
                        tmp1 = i
                        tmp[f'{i}'] = []
                    else:
                        if i != tmp1:
                            tmp1 = i
                            tmp[f'{i}'] = []    
                    tmp[f'{i}'].append([query[f'{i}'][idx], count])              
    
    for i in query.keys():
        for idx, j in enumerate(query[f'{i}']):
            #print(f"{j} : {tmp[f'{i}'][idx][1]}/{len(query[f'{i}'])}")
            tmp[f'{i}'][idx][1] = tmp[f'{i}'][idx][1]/len(query[f'{i}'])

    #tmp:     {'85': [[word],tf:idf],....
    #          '77': [[word],tf:idf],....}
    count = 0
    #print(tmp)
    for i in query.keys():
        for y in range(len(query[f'{i}'])):
            #print(f"{tmp[f'{i}'][y][1]}*{idf[count][1]} = {tmp[f'{i}'][y][1]*idf[count][1]}")
            tmp[f'{i}'][y][1] = tmp[f'{i}'][y][1]*idf[count][1]
            count+=1
    #print(tmp)
    return tmp #query:td_idf
    '''{ tmp:
    '85': [['document', 0.12463522766658182], ['discuss', 0.09123186824156572], ['alleg', 0.09366225490040615], ['measur', 0.10318365040222552],  ['taken', 0.08485225371785557], ['corrupt', 0.1509848484585334], ['public', 0.06582865168982505], ['offici', 0.03551705929659284], ['government', 0.2298723052449153], ['jurisdict', 0.19369594082018457], ['worldwid', 0.1583172058779544]],
    '77': [['document', 0.17137343804155], ['report', 0.04913314784203862], ['poach', 0.42896066808575145],['method', 0.22477711113830315], ['use', 0.07410453174359456], ['certain', 0.15447321153459725], ['type', 0.19244884274944143], ['wildlif', 0.24806591416797408]], 
    '87': [['document', 0.13709875043324002], ['report', 0.0393065182736309], ['current', 0.11328322682763053], ['crimin', 0.1352504098638387], ['action', 0.09265353663661058], ['offic', 0.0582880643634208], ['fail', 0.1097231593535081], ['us', 0.045031983560746745], ['financi', 0.11506519774382842], ['institut', 0.11886472959997174]], 
    '94': [['document', 0.19585535776177143], ['must', 0.13493528131554647], ['identifi', 0.14918507404961176], ['crime', 0.19168289046380196], ['perpetr', 0.36122790824200973], ['aid', 0.13761971632483636], ['comput', 0.22845377599711075]], 
    '100': [['document', 0.10546057725633846], ['identifi', 0.08033042448825249], ['effort', 0.06526819774749147], ['noncommunist', 0.14334489389377053], ['industri', 0.07353955048935248], ['state', 0.02850846315817077], ['regul', 0.10946809022493031], ['transfer', 0.12664273151348038], ['hightech', 0.19896825420551964], ['good', 0.06449225212811958], ['technolog', 0.11929782710809389], ['undesir', 0.22727416076664228], ['nation', 0.030481200500112576]], 
    '89': [['document', 0.12463522766658182], ['must', 0.0858679062917114], ['identifi', 0.09493595621338931], ['exist', 0.1216603326839797], ['pend', 0.15375660501743346], ['invest', 0.12230231945556942], ['opec', 0.2572386684870954], ['member', 0.05780048430381241], ['state', 0.03369182009602], ['downstream', 0.2685967354514863], ['oper', 0.07532190655143904]], 
    '95': [['document', 0.19585535776177143], ['must', 0.13493528131554647], ['describ', 0.17160520332967685], ['comput', 0.22845377599711075], ['applic', 0.27145806109196524], ['crime', 0.19168289046380196], ['solv', 0.23030591559202043]], 
    '98': [['document', 0.15233194492582222], ['must', 0.10494966324542503], ['identifi', 0.11603283537192026], ['individu', 0.15581128522231133], ['organ', 0.08585783355795297], ['produc', 0.1251482194710431], ['fiber', 0.38129837163177904], ['optic', 0.38129837163177904], ['equip', 0.1486959621693085]], 
    '91': [['document', 0.15233194492582222], ['identifi', 0.11603283537192026], ['acquisit', 0.22050303481597694], ['us', 0.0500355372897186], ['armi', 0.10574204463654012], ['specifi', 0.21559151676130434], ['advanc', 0.14114637138344852], ['weapon', 0.13152356425824502], ['system', 0.10574204463654012]]}'''

def doc_tf_idf(query,idf):
    exist_word = []
    exist_idf_word = []
    cnt = 0
    #print(len(idf))
    for i in exist_query_word:
        for n in range(len(dic[f'{i}'])):
            for y in query[f'{idf[cnt][0]}'].keys():
                if (idf[cnt][0],y) in exist_word:
                    continue
                else:
                    exist_word.append((idf[cnt][0],y))
                    query[f'{idf[cnt][0]}'][f'{y}'] = query[f'{idf[cnt][0]}'][f'{y}'] * idf[cnt][1]
            cnt += 1
    f.close()
    return query

def consine_sim_cal(a,b):
    a=numpy.array(a)
    b=numpy.array(b)
    dot_a_b = numpy.dot(a,b)
    x = pow(numpy.linalg.norm(a),2)
    y = pow(numpy.linalg.norm(b),2)
    denom = numpy.sqrt(x*y)
    if denom == 0:
        return 0
    result = dot_a_b/denom
    if str(result) == "nan":
        result = 0
    return result

def cosine(Di,Q):
    cosine_similarity = {}
    with open('testing.txt','w') as f: 
        for j in Di.keys():
            cosine_similarity[f'{j}'] = {}
            a = numpy.array(Q[f'{j}'])
            for k in Di[f'{j}']:
                b = numpy.array(Di[f'{j}'][f'{k}'])
                cosine_similarity[f'{j}'][f'{k}'] = consine_sim_cal(a,b)
                f.write(f"{j}\t{k}\t{cosine_similarity[f'{j}'][f'{k}']}\n")
    f.close()

def top_10(doc):
    tmp = []
    docn = []
    docid = []
    all_cosim_value = {}
    with open('docids.txt','r') as f:
        for i in f:
            walker = i.rsplit()
            docn.append(walker)
            docid.append(walker[0])
    f.close()

    with open('testing.txt', 'r') as file:
        with open(name_of_result_file,'w') as f1:
            for i in file:
                tmp.append(i.rsplit())
            for y in query_num:
                all_cosim_value[f'{y}'] = []
                for i in tmp:
                    all_cosim_value[f'{y}'].append(i[2])
                top10_doc = list(zip(*heapq.nlargest(10, enumerate(all_cosim_value[f'{y}']), key=operator.itemgetter(1))))[0]
                for idx, x in enumerate(top10_doc):
                    tmp_x = docid.index(str(tmp[x][1]))
                    f1.write(f'{y}\tQ0\t{docn[tmp_x][1]}\t{idx+1}\t{tmp[x][2]}\tExp\n')
    f1.close()
    file.close()

def set_d_q(Dii,Q):
    for i in Q.keys():
        query_tf_idf[f'{i}'] = []
    for i in Q.keys():
        for j in range(len(Q[f'{i}'])):
            query_tf_idf[f'{i}'].append(Q[f'{i}'][j][1])

    for idx, i in enumerate(Dii.keys()):
        for y in num_term_doc:
            if str(y[0]) not in Dii[f'{i}']:
                Dii[f'{i}'][f'{y[0]}'] = 0
            else:
                continue

    for z in query_num:
        all_doc_tf_idf[f'{z}'] = {}
        for x in num_term_doc:
            all_doc_tf_idf[f'{z}'][f'{x[0]}'] = []
            for indx, y in enumerate(dic[f'{z}']):
                all_doc_tf_idf[f'{z}'][f'{x[0]}'].append(Dii[f'{y}'][f'{x[0]}'])

if __name__ == "__main__":
    query_file = sys.argv[1]
    name_of_result_file = sys.argv[2]
    read_query_list_to_dict(query_file)
    for i in query_num:
        read_query_word(dic[f'{i}'],i)
    query_idf = idf(docid_word)
    '''[('document', 1.3709875043324), ('discuss', 1.0035505506572229), ('alleg', 1.0302848039044676), ('measur', 1.1350201544244807), ('taken', 0.9333747908964113), ('corrupt', 1.6608333330438676), ('public', 0.7241151685880755),
        ('offici', 0.3906876522625212), ('government', 2.5285953576940683), ('jurisdict', 2.1306553490220304), ('worldwid', 1.7414892646574982), ('document', 1.3709875043324), ('report', 0.39306518273630897), 
        ('poach', 3.4316853446860116), ('method', 1.7982168891064252), ('use', 0.5928362539487565), ('certain', 1.235785692276778), ('type', 1.5395907419955315), ('wildlif', 1.9845273133437926), ('document', 1.3709875043324), 
        ('report', 0.39306518273630897), ('current', 1.1328322682763052), ('crimin', 1.352504098638387), ('action', 0.9265353663661058), ('offic', 0.582880643634208), ('fail', 1.097231593535081), ('us', 0.4503198356074674), 
        ('financi', 1.1506519774382842), ('institut', 1.1886472959997174), ('document', 1.3709875043324), ('must', 0.9445469692088253), ('identifi', 1.0442955183472824), ('crime', 1.3417802332466138), ('perpetr', 2.5285953576940683), 
        ('aid', 0.9633380142738545), ('comput', 1.5991764319797754), ('document', 1.3709875043324), ('identifi', 1.0442955183472824), ('effort', 0.8484865707173891), ('noncommunist', 1.8634836206190168), ('industri', 0.9560141563615822), 
        ('state', 0.37061002105622), ('regul', 1.423085172924094), ('transfer', 1.6463555096752447), ('hightech', 2.586587304671755), ('good', 0.8383992776655546), ('technolog', 1.5508717524052205), ('undesir', 2.9545640899663494), 
        ('nation', 0.39625560650146346), ('document', 1.3709875043324), ('must', 0.9445469692088253), ('identifi', 1.0442955183472824), ('exist', 1.3382636595237767), ('pend', 1.691322655191768), ('invest', 1.3453255140112637), 
        ('opec', 2.8296253533580495), ('member', 0.6358053273419365), ('state', 0.37061002105622), ('downstream', 2.9545640899663494), ('oper', 0.8285409720658294), ('document', 1.3709875043324), ('must', 0.9445469692088253), 
        ('describ', 1.201236423307738), ('comput', 1.5991764319797754), ('applic', 1.9002064276437567), ('crime', 1.3417802332466138), ('solv', 1.612141409144143), ('document', 1.3709875043324), ('must', 0.9445469692088253), 
        ('identifi', 1.0442955183472824), ('individu', 1.402301567000802), ('organ', 0.7727205020215768), ('produc', 1.126333975239388), ('fiber', 3.4316853446860116), ('optic', 3.4316853446860116), ('equip', 1.3382636595237767), 
        ('document', 1.3709875043324), ('identifi', 1.0442955183472824), ('acquisit', 1.9845273133437926), ('us', 0.4503198356074674), ('armi', 0.9516784017288611), ('specifi', 1.9403236508517392), ('advanc', 1.2703173424510368), 
        ('weapon', 1.1837120783242052), ('system', 0.9516784017288611)]'''
    tftmp = tf(docid_word)  # {word:{docid:tf}}
    qtf_idf = query_tf_idf_word(exist_query_word,query_idf) 
    '''{
    '85': [['document', 0.12463522766658182], ['discuss', 0.09123186824156572], ['alleg', 0.09366225490040615], ['measur', 0.10318365040222552], ['taken', 0.08485225371785557], ['corrupt', 0.1509848484585334], ['public', 0.06582865168982505], ['offici', 0.03551705929659284], ['government', 0.2298723052449153], ['jurisdict', 0.19369594082018457], ['worldwid', 0.1583172058779544]], 
    '77': [['document', 0.17137343804155], ['report', 0.04913314784203862], ['poach', 0.42896066808575145], ['method', 0.22477711113830315], ['use', 0.07410453174359456], ['certain', 0.15447321153459725], ['type', 0.19244884274944143], ['wildlif', 0.24806591416797408]], 
    '87': [['document', 0.13709875043324002], ['report', 0.0393065182736309], ['current', 0.11328322682763053], ['crimin', 0.1352504098638387], ['action', 0.09265353663661058], ['offic', 0.0582880643634208], ['fail', 0.1097231593535081], ['us', 0.045031983560746745], ['financi', 0.11506519774382842], ['institut', 0.11886472959997174]], 
    '94': [['document', 0.19585535776177143], ['must', 0.13493528131554647], ['identifi', 0.14918507404961176], ['crime', 0.19168289046380196], ['perpetr', 0.36122790824200973], ['aid', 0.13761971632483636], ['comput', 0.22845377599711075]], 
    '100': [['document', 0.10546057725633846], ['identifi', 0.08033042448825249], ['effort', 0.06526819774749147], ['noncommunist', 0.14334489389377053], ['industri', 0.07353955048935248], ['state', 0.02850846315817077], ['regul', 0.10946809022493031], ['transfer', 0.12664273151348038], ['hightech', 0.19896825420551964], ['good', 0.06449225212811958], ['technolog', 0.11929782710809389], ['undesir', 0.22727416076664228], ['nation', 0.030481200500112576]], 
    '89': [['document', 0.12463522766658182], ['must', 0.0858679062917114], ['identifi', 0.09493595621338931], ['exist', 0.1216603326839797], ['pend', 0.15375660501743346], ['invest', 0.12230231945556942], ['opec', 0.2572386684870954], ['member', 0.05780048430381241], ['state', 0.03369182009602], ['downstream', 0.2685967354514863], ['oper', 0.07532190655143904]], 
    '95': [['document', 0.19585535776177143], ['must', 0.13493528131554647], ['describ', 0.17160520332967685], ['comput', 0.22845377599711075], ['applic', 0.27145806109196524], 'crime', 0.19168289046380196], ['solv', 0.23030591559202043]], 
    '98': [['document', 0.15233194492582222], ['must', 0.10494966324542503], ['identifi', 0.11603283537192026], ['individu', 0.15581128522231133], ['organ', 0.08585783355795297], ['produc', 0.1251482194710431], ['fiber', 0.38129837163177904], ['optic', 0.38129837163177904], ['equip', 0.1486959621693085]], 
    '91': [['document', 0.15233194492582222], ['identifi', 0.11603283537192026], ['acquisit', 0.22050303481597694], ['us', 0.0500355372897186], ['armi', 0.10574204463654012], ['specifi', 0.21559151676130434], ['advanc', 0.14114637138344852], ['weapon', 0.13152356425824502], ['system', 0.10574204463654012]]}
    '''
    doctf_idf = doc_tf_idf(tftmp,query_idf)
    '''{'document': {'1010024': 0.0046006292091691275, '1010035': 0.02507903971339756, '1010038': 0.004967346030189855, '1280029': 0.01757676287605641, '1280032': 0.003151695412258391, '1280038': 0.026882107928086273, '1280051': 0.0036365716295289124, '1280073': 0.005293388047615444, '1280075': 0.00993469206037971, '1280084': 0.0027419750086648, '1280097': 0.007030705150422564, '1280116': 0.008568671902077501, '1280124': 0.010586776095230888, '1280143': 0.005505973912981525, '1280151': 0.006013103089177193, '2190036': 0.007616597246291112, '2190052': 0.011852917904891068, '2190077': 0.01046555346818626, '2190079': 0.009553919890818118, '2190092': 0.011991144352761517, '2190107': 0.00770217699063146, '2250008': 0.004760373278931944, '2250037': 0.012577867012223853, '2250050': 0.004509827316882894, '2250053': 0.003410416677443781, '2250055': 0.0028984936666646938, '3210011': 0.006260216914759817, '4160002': 0.0023843260944911306, '4160011': 0.003570279959198958, '4160029': 0.005397588599733858, '4160054': 0.008622562920329561, '4160059': 0.003917107155235428, '4160079': 0.008160639906740475, '4160083': 0.005833989380137873, '4230002': 0.01011798896186273, '4230043': 0.01350726605253596, '4230048': 0.006120479930055357, '4230057': 0.0050777314975274076, '5140039': 0.007616597246291112, '6110062': 0.015491384229744633, '7020010': 0.010007208060820437, '7020014': 0.002792235243039511, '7020017': 0.0037053716333308112, '7020067': 0.0031372711769620137, '7020069': 0.00662312804025314, '7160026': 0.0034796637165796953, '7160031': 0.0038403011325837534, '7160049': 0.011443969151355593, '7160105': 0.0069241793148101015, '8060003': 0.0037977493194803324, '8060024': 0.009810286256403579, '8060064': 0.017805032523797403, '8060077': 0.00433856805168481, '8260008': 0.005986844997084716, '8260024': 0.005960815236227826, '8260034': 0.011818857795968965, '8260044': 0.007970857583327906, '8260065': 0.00458524248940602, '8260068': 0.01123760249452787, '8260080': 0.0030466388985164444, '8260092': 0.014355890097721468, '8260114': 0.00662312804025314, '8260136': 0.008436846180507078, '8260139': 0.00675363302626798, '8270010': 0.0028443724156273858, '8270012': 0.0024791817438198915, '9170039': 0.0038295740344480448, '9170045': 0.006391550136747786, '10070006': 0.013848358629620203, '10070018': 0.008334270543054103, '10070060': 0.00331156402012657, '10070072': 0.001906797641630598, '10070087': 0.005528175420695162, '10070101': 0.02026089907880394, '10070112': 0.017614400483928053, '10070121': 0.006575479637085851, '10230021': 0.0065285119253923815, '10230093': 0.00458524248940602, '10230121': 0.0031088152025678007, '10230124': 0.02492704553331636, '10280005': 0.004352341283594921, '10280012': 0.01101194782596305, '10280024': 0.0053764215856172545, '10280077': 0.002497244998783971, '10280080': 0.00225862850796112, '10280151': 0.0053764215856172545, '10280156': 0.002868174695256067, '12010015': 0.0061479260283964126, '12010022': 0.0030197962650493396, '12010054': 0.002254913658441447, '12010157': 0.005040395236516177, '12270012': 0.0050777314975274076, '12270044': 0.007215723707012632, '12270057': 0.0331156402012657, '12270066': 0.007066945898620619, '12270067': 0.004577587660542237, '12270076': 0.0023968313012804198, '12270086': 0.005115625016165672, '12270123': 0.006013103089177193, '12270129': 0.004352341283594921, '12270140': 0.002025092325454062, '12270150': 0.009099474586276992, '12270153': 0.002792235243039511, '12270167': 0.002646694023807722, '12270192': 0.005641923886141565, '12290004': 0.002524838866173849, '12290024': 0.0038403011325837534, '12290071': 0.011569514804492826, '12290075': 0.034562710193253784, '12290079': 0.003151695412258391, '12290080': 0.005712447934718333, '12290133': 0.003195775068373893, '12290136': 0.00867713610336962, '12290152': 0.004020491215051027, '12290212': 0.007331483980387165}, 'discuss': {'1010001': 0.001675376545337601, '1010012': 0.0035212300023060453, '1010015': 0.0038747125508000885, '1010062': 0.0034486273218461267, '1280017': 0.004646067364153809, '1280018': 0.0035336286994972635, '1280020': 0.0071682182189801635, '1280022': 0.005653805919195622, '1280024': 0.003258281008627347, '1280035': 0.002697716534024793, '1280040': 0.004096124696560094, '1280042': 0.0046246569154710735, '1280045': 0.002787640418492286, '1280058': 0.003378958083020952, '1280072': 0.015090985724168764, '1280077': 0.003279576962932101, '1280085': 0.002787640418492286, '1280088': 0.003279576962932101, '1280101': 0.003312048021971033, '1280103': 0.003889730816500864, '1280107': 0.006021303303943337, '1280110': 0.004096124696560094, '1280112': 0.002441728833715871, '1280116': 0.0031360954708038215, '1280118': 0.016186299204148755, '1280120': 0.010188330463525104, '1280131': 0.0030136653172889577, '1280134': 0.005017752753286114, '1280136': 0.00264789063497948, '1280138': 0.004919365444398151, '1280140': 0.004646067364153809, '1280144': 0.003779851414904794, '1280151': 0.004401537502882556, '1280154': 0.0061947564855384125, '2190009': 0.002130680574643785, '2190011': 0.0028110659682275153, '2190017': 0.005606427657302921, '2190037': 0.0031263257029820026, '2190041': 0.006803732546828629, '2190082': 0.0022756248314222743, '2190084': 0.010676069687842796, '2190090': 0.006780746963900155, '2190106': 0.003527418455737163, '2190107': 0.0056379244418945105, '2190110': 0.0058176843516360745, '2250002': 0.004980399755122694, '2250008': 0.003484550523115357, '2250015': 0.017814506816400406, '2250042': 0.0015705016442210062, '2250051': 0.003378958083020952, '2250062': 0.0021038795611262534, '2250076': 0.0022964543493300296, '2250093': 0.006780746963900155, '2250096': 0.018498627661884294, '2250127': 0.0051464130802934506, '2250129': 0.005544478180426645, '2250138': 0.0035336286994972635, '2250141': 0.004778812145986776, '2250152': 0.0030410622747188572, '2250156': 0.001338067400876297, '2250158': 0.0030046423672371943, '3210001': 0.0020907303138692143, '3210012': 0.0054838827904766276, '4160004': 0.0046246569154710735, '4160007': 0.0027419413952383138, '4160017': 0.005254191364697502, '4160031': 0.0037586162945963406, '4160067': 0.006873633908611115, '4160080': 0.004530702260303489, '4230007': 0.004540952717905986, '4230016': 0.012090970489846059, '4230046': 0.0031263257029820026, '4230048': 0.004480136386862602, '4230051': 0.0030878478481760705, '4230052': 0.0036492747296626286, '4230064': 0.006412463582474267, '4230065': 0.004420927535934903, '5140014': 0.00416411016870217, '5140035': 0.0039048659558646804, '5140064': 0.010136874249062858, '5140068': 0.002167495789756421, '5140074': 0.004646067364153809, '6110009': 0.0019151728065977536, '6110037': 0.0031858747639911837, '6110053': 0.0024123811313875552, '6110063': 0.0015368308585868651, '6110066': 0.004138352786215352, '6110075': 0.0071682182189801635, '7020008': 0.002734470165278536, '7020020': 0.008093149602074377, '7020023': 0.005468940330557072, '7020061': 0.002280796706039143, '7160003': 0.003920119338504777, '7160006': 0.0022912113028703716, '7160009': 0.002930074600459045, '7160030': 0.00796468690997796, '7160043': 0.0059381689388001355, '7160045': 0.0025998718928943597, '7160046': 0.0028509958825489287, '7160047': 0.0027722390902133226, '7160049': 0.001675376545337601, '7160055': 0.006850174407216539, '7160056': 0.008772295023227473, '7160058': 0.010136874249062858, '7160059': 0.004316346454439669, '7160060': 0.004540952717905986, '7160061': 0.0022756248314222743, '7160064': 0.0058176843516360745, '7160067': 0.0030136653172889577, '7160068': 0.005017752753286114, '7160095': 0.0026548956366593194, '7160099': 0.011403983530195715, '8060009': 0.006921038280394641, '8060026': 0.003950986419910326, '8060037': 0.006921038280394641, '8060040': 0.005669777122357191, '8060043': 0.008651297850493301, '8060044': 0.0060821245494377145, '8060058': 0.0060821245494377145, '8060062': 0.002917298112375648, '8060066': 0.0023392786728606593, '8060070': 0.004561593412078286, '8260029': 0.0033903734819500774, '8260048': 0.008060646993230705, '8260054': 0.005653805919195622, '8260055': 0.003454562997098874, '8260063': 0.005544478180426645, '8260069': 0.004943598771710457, '8260075': 0.006646030136802801, '8260078': 0.0020111233480104664, '8260089': 0.001904270494605736, '8260107': 0.002795405433585579, '8260118': 0.00199117172749449, '8260141': 0.001956238890170025, '8260144': 0.002317668708215295, '8260149': 0.0026832902423989916, '8260150': 0.002135213937568559, '8270010': 0.002082055084351085, '8270013': 0.0028110659682275153, '8270032': 0.0035841091094900818, '8270033': 0.002995673285543949, '8270040': 0.007564451386863489, '8270052': 0.008726526527454112, '8270060': 0.002633990946606884, '9170047': 0.006131673425604213, '9170065': 0.006616816817520151, '9170073': 0.005226825784673036, '9170082': 0.002424035146515031, '10070005': 0.007985813400455354, '10070007': 0.002977894809071878, '10070012': 0.003496691814136665, '10070020': 0.0032268506452000733, '10070022': 0.0030136653172889577, '10070029': 0.0028509958825489287, '10070036': 0.008688749356339592, '10070037': 0.005199743785788719, '10070054': 0.006873633908611115, '10070055': 0.00335635635671312, '10070068': 0.004279533265062784, '10070078': 0.0028509958825489287, '10070092': 0.0021911584075485213, '10070111': 0.010035505506572229, '10070119': 0.006175695696352141, '10070129': 0.006272190941607643, '10070142': 0.018246373648313143, '10070145': 0.0017067186235667055, '10230009': 0.0038157815614343073, '10230015': 0.00495580518843073, '10230019': 0.0019951303193980574, '10230029': 0.002490199877561347, '10230050': 0.004943598771710457, '10230057': 0.0019225106334429555, '10230064': 0.007933205934049193, '10230069': 0.010240311741400233, '10230074': 0.005767531900328867, '10230075': 0.008726526527454112, '10230082': 0.007289713443030675, '10230088': 0.0020777444112985983, '10230095': 0.0071682182189801635, '10230116': 0.012466466467791587, '10230119': 0.018413771571692165, '10230122': 0.0037586162945963406,'''
    set_d_q(doctf_idf,qtf_idf)
    all_cosine = cosine(all_doc_tf_idf,query_tf_idf)
    top_10(all_cosine)